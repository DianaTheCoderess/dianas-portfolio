---
import resumeData from "../data/resume.json"

// Pre-render the available commands on the server
const availableCommands = {
  help: "List all available commands",
  about: "Display information about me",
  skills: "List my technical skills",
  contact: "Show contact information",
  clear: "Clear the terminal",
  projects: "List my projects",
  whoami: "Display current user",
}

// Pre-render the initial welcome message
const welcomeMessage = {
  input: "welcome",
  output: {
    message: "Welcome to my interactive terminal!",
    help: "Type 'help' to see available commands.",
  },
}

// Pre-render the skills list
const skills = resumeData.skills[0]?.keywords || []

// Pre-render contact information
const contactInfo = {
  email: resumeData.basics.email,
  profiles: resumeData.basics.profiles,
}

// Pre-render projects
const projects = resumeData.projects
---

<div class="cyber-window rounded-lg sm:rounded-xl relative overflow-hidden cursor-text group" style={{ height: `${TERMINAL.HEIGHT}px` }}>
  {/* Grid Background */}
  <div class="absolute inset-0 grid gap-4 p-4 opacity-20 pointer-events-none" 
       style={{ 
         gridTemplateColumns: `repeat(${TERMINAL.GRID_COLS}, minmax(0, 1fr))`,
         gridTemplateRows: `repeat(${TERMINAL.GRID_ROWS}, minmax(0, 1fr))`
       }}>
    {Array.from({ length: TERMINAL.GRID_CELLS }).map(() => (
      <div class="bg-cyber-blue/30 rounded-full w-2 h-2"></div>
    ))}
  </div>

  {/* Glow Effects */}
  <div class="absolute inset-0 bg-linear-to-b from-neon-pink/5 to-cyber-blue/5 pointer-events-none"></div>
  <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
    <div class="absolute inset-0 bg-linear-to-r from-neon-pink/10 via-transparent to-cyber-blue/10"></div>
  </div>

  {/* Terminal Content */}
  <div id="terminal-content" class="h-full font-mono text-sm overflow-y-auto space-y-4 terminal-scrollbar p-4">
    <div class="space-y-4" id="command-output">
      {/* Initial welcome message will be rendered here */}
    </div>
  </div>

  {/* Bottom Gradient */}
  <div class="absolute bottom-0 left-0 right-0 h-20 bg-linear-to-t from-deep-purple/90 to-transparent pointer-events-none"></div>
</div>

<script define:vars={{ availableCommands, welcomeMessage, skills, contactInfo, projects, resumeData }}>
  let commands = [];
  let commandHistory = [];
  let historyIndex = -1;
  
  const terminalContent = document.getElementById('terminal-content');
  const commandOutput = document.getElementById('command-output');

  function createCommandElement(cmd) {
    const div = document.createElement('div');
    div.className = 'space-y-2';
    
    // Command input line
    const inputLine = document.createElement('div');
    inputLine.className = 'flex items-center gap-2';
    inputLine.innerHTML = `
      <span class="text-neon-pink">visitor@portfolio</span>
      <span class="text-cream/80">~$</span>
      <span class="text-cyber-blue">${cmd.input}</span>
    `;
    
    // Command output
    const outputLine = document.createElement('div');
    outputLine.className = cmd.isError ? 'text-red-400 pl-4' : 'text-cream/90 pl-4';
    outputLine.innerHTML = typeof cmd.output === 'string' ? cmd.output : renderOutput(cmd.output);
    
    div.appendChild(inputLine);
    div.appendChild(outputLine);
    return div;
  }

  function renderOutput(output) {
    if (output.message) {
      return `
        <div class="space-y-1">
          <p class="text-cyber-blue">${output.message}</p>
          <p class="text-cream/80">${output.help}</p>
        </div>
      `;
    }

    switch (output.type) {
      case 'help':
        return `
          <div class="space-y-2">
            <p class="text-cyber-blue">Available commands:</p>
            ${Object.entries(availableCommands).map(([cmd, desc]) => `
              <div class="flex gap-4">
                <span class="text-neon-pink">${cmd}</span>
                <span class="text-cream/60">${desc}</span>
              </div>
            `).join('')}
          </div>
        `;

      case 'about':
        return `
          <div class="space-y-2">
            <p class="text-cyber-blue">About Me:</p>
            <p class="text-cream/80">${resumeData.basics.summary}</p>
          </div>
        `;

      case 'skills':
        return `
          <div class="space-y-2">
            <p class="text-cyber-blue">Technical Skills:</p>
            <div class="flex flex-wrap gap-2">
              ${skills.map(skill => `
                <span class="px-2 py-1 bg-deep-purple/50 rounded-sm text-neon-pink border border-neon-pink/20">
                  ${skill}
                </span>
              `).join('')}
            </div>
          </div>
        `;

      case 'contact':
        return `
          <div class="space-y-2">
            <p class="text-cyber-blue">Contact Information:</p>
            <p class="text-cream/80">Email: ${contactInfo.email}</p>
            ${contactInfo.profiles.map(profile => `
              <p class="text-cream/80">
                ${profile.network}: <a href="${profile.url}" target="_blank" rel="noopener noreferrer" class="text-neon-pink hover:text-cyber-blue transition-colors duration-300">${profile.url}</a>
              </p>
            `).join('')}
          </div>
        `;

      case 'projects':
        return `
          <div class="space-y-2">
            <p class="text-cyber-blue">Featured Projects:</p>
            <div class="space-y-4">
              ${projects.map(project => `
                <div class="space-y-1">
                  <p class="text-neon-pink font-bold">${project.name}</p>
                  <p class="text-cream/80">${project.description}</p>
                  ${project.url ? `
                    <a href="${project.url}" target="_blank" rel="noopener noreferrer" class="text-cyber-blue hover:text-neon-pink transition-colors duration-300">
                      View Project â†’
                    </a>
                  ` : ''}
                </div>
              `).join('')}
            </div>
          </div>
        `;

      default:
        return output;
    }
  }

  function handleCommand(cmd) {
    const command = cmd.toLowerCase().trim();
    let output = { type: 'error', content: 'Command not found. Type "help" for available commands.' };
    let isError = true;

    switch (command) {
      case 'help':
        output = { type: 'help' };
        isError = false;
        break;

      case 'about':
        output = { type: 'about' };
        isError = false;
        break;

      case 'skills':
        output = { type: 'skills' };
        isError = false;
        break;

      case 'contact':
        output = { type: 'contact' };
        isError = false;
        break;

      case 'clear':
        commands = [];
        commandOutput.innerHTML = '';
        createInputLine();
        return;

      case 'whoami':
        output = 'visitor@portfolio ~';
        isError = false;
        break;

      case 'projects':
        output = { type: 'projects' };
        isError = false;
        break;
    }

    const newCommand = { input: cmd, output, isError };
    commands.push(newCommand);
    commandHistory.push(cmd);
    historyIndex = commandHistory.length;
    
    const oldInput = commandOutput.querySelector('.input-line');
    if (oldInput) {
      oldInput.remove();
    }
    
    commandOutput.appendChild(createCommandElement(newCommand));
    createInputLine();
    
    terminalContent.scrollTop = terminalContent.scrollHeight;
  }

  function createInputLine() {
    const inputLine = document.createElement('div');
    inputLine.className = 'flex items-center gap-2 input-line';
    inputLine.innerHTML = `
      <span class="text-neon-pink">visitor@portfolio</span>
      <span class="text-cream/80">~$</span>
      <input
        type="text"
        class="flex-1 bg-transparent outline-hidden text-cyber-blue caret-neon-pink"
        autocomplete="off"
        spellcheck="false"
      />
    `;
    commandOutput.appendChild(inputLine);
    
    const input = inputLine.querySelector('input');
    input.focus();

    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && input.value.trim()) {
        handleCommand(input.value);
        input.value = '';
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        if (historyIndex > 0) {
          historyIndex--;
          input.value = commandHistory[historyIndex];
        }
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        if (historyIndex < commandHistory.length - 1) {
          historyIndex++;
          input.value = commandHistory[historyIndex];
        } else {
          historyIndex = commandHistory.length;
          input.value = '';
        }
      }
    });

    return input;
  }

  // Initialize with welcome message
  commands.push(welcomeMessage);
  commandOutput.appendChild(createCommandElement(welcomeMessage));
  createInputLine();

  // Focus input on click
  terminalContent.addEventListener('click', () => {
    const input = commandOutput.querySelector('.input-line input');
    if (input) {
      input.focus();
    }
  });
</script>
